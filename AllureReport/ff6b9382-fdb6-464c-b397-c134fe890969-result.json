{"name": "test_number_square", "status": "skipped", "statusDetails": {"message": "XFAIL reason: [NOTRUN] \n\n_pytest.outcomes.XFailed: [NOTRUN]", "trace": "cls = <class '_pytest.runner.CallInfo'>, func = <function call_and_report.<locals>.<lambda> at 0x000001DB97C88FE0>, when = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: Callable[[], TResult],\n        when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"],\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n.venv\\Lib\\site-packages\\_pytest\\runner.py:341: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\_pytest\\runner.py:241: in <lambda>\n    lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\n.venv\\Lib\\site-packages\\pluggy\\_hooks.py:513: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n.venv\\Lib\\site-packages\\pluggy\\_manager.py:120: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n.venv\\Lib\\site-packages\\_pytest\\unraisableexception.py:85: in pytest_runtest_setup\n    yield from unraisable_exception_runtest_hook()\n.venv\\Lib\\site-packages\\_pytest\\unraisableexception.py:65: in unraisable_exception_runtest_hook\n    yield\n.venv\\Lib\\site-packages\\_pytest\\logging.py:844: in pytest_runtest_setup\n    yield from self._runtest_for(item, \"setup\")\n.venv\\Lib\\site-packages\\_pytest\\logging.py:833: in _runtest_for\n    yield\n.venv\\Lib\\site-packages\\_pytest\\capture.py:873: in pytest_runtest_setup\n    return (yield)\n.venv\\Lib\\site-packages\\_pytest\\threadexception.py:82: in pytest_runtest_setup\n    yield from thread_exception_runtest_hook()\n.venv\\Lib\\site-packages\\_pytest\\threadexception.py:63: in thread_exception_runtest_hook\n    yield\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nitem = <Function test_number_square>\n\n    @hookimpl(tryfirst=True)\n    def pytest_runtest_setup(item: Item) -> None:\n        skipped = evaluate_skip_marks(item)\n        if skipped:\n            raise skip.Exception(skipped.reason, _use_item_location=True)\n    \n        item.stash[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n        if xfailed and not item.config.option.runxfail and not xfailed.run:\n>           xfail(\"[NOTRUN] \" + xfailed.reason)\nE           _pytest.outcomes.XFailed: [NOTRUN]\n\n.venv\\Lib\\site-packages\\_pytest\\skipping.py:244: XFailed"}, "start": 1715472604632, "stop": 1715472604632, "uuid": "9f1bd2be-1640-4b78-a54e-67e42a3f10e2", "historyId": "b63b4c2225153307f858e82d74cc9abc", "testCaseId": "b63b4c2225153307f858e82d74cc9abc", "fullName": "DemoPytest.test_fail.Test_Math#test_number_square", "labels": [{"name": "tag", "value": "@pytest.mark.xfail(run=False)"}, {"name": "parentSuite", "value": "DemoPytest"}, {"name": "suite", "value": "test_fail"}, {"name": "subSuite", "value": "Test_Math"}, {"name": "host", "value": "TeleeB"}, {"name": "thread", "value": "17276-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "DemoPytest.test_fail"}]}